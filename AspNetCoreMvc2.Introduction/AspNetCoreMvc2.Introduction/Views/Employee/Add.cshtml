@model AspNetCoreMvc2.Introduction.EmployeeAddViewModel;

<!--Layout ekleme işlemini _ViewStart'ın içerisine verdik.-->

<!--Html, body, head kısımları layoutumuzdan geleceği için bu sayfa içerisinde hepsini sildim.-->
<!--Form tagi ile başlatıp içerisine tag helperler ile birşeyler yazdıklarımın hepsi
    layout sayfasındaki RenderBody() kısmına yerleşecek.-->
<!--taghelperi viewImportsa ekledim
    View'sin altına viewimport eklersen yazdığın şey bütün viewlarda geçerli olur.
    kendi yazdığımız taghelperleri de koyabiliriz oraya , bütün viewlerde geçerli olur.-->

<form asp-controller="Employee" asp-action="Add">
    <!--hangi controllera bakayım, hangi action çalışcak.-->
    <label asp-for="Employee.Id"></label> <input asp-for="Employee.Id" /><br /> <!--asp-for modeldeki hangi nesne için bu inputu kullanıyoruz.-->
    <label asp-for="Employee.FirstName"></label> <input asp-for="Employee.FirstName" /><br />
    <label asp-for="Employee.LastName"></label> <input asp-for="Employee.LastName" /><br />
    <label asp-for="Employee.CityId"></label> <select asp-for="Employee.CityId" asp-items="Model.Cities"></select>
    <button type="submit">Add</button>
</form>

<br />
<br />
<employee-list count="1"></employee-list> <!--custom tag helperimiz.-->
<!--tag helperimize count diyerek parametre geçiyoruz-->


<!--Layout sayfasında olmasını istediğimiz birşey var fakat bu bölüm sayfadan sayfaya değişiyor
    genelde script referansları(bütün scriptleri yüklemek yerine o sayfaya özgü script refere edilmesi.),
    sadece bazı sayfalarda yüklenmesini istediğimiz bölümleri Section ile hallediyoruz.
    -->
<!--layout sayfamıza gidip section'u render ediyoruz.-->
@section MySection{
    Some Content
}